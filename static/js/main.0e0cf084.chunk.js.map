{"version":3,"sources":["Components/todo-form/todo-form.component.jsx","Components/todo/todo.component.jsx","HasuraAPI/GraphQL.js","Components/todo-list/todo-list.component.jsx","App.js","index.js"],"names":["TodoForm","props","useState","edit","task","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","value","className","onSubmit","preventDefault","type","placeholder","name","onChange","ref","Todo","todo","completeTodo","removeTodo","updateTodo","id","completed","setEdit","onClick","fetchGraphQL","operationsDoc","operationName","variables","a","fetch","headers","method","body","JSON","stringify","query","result","json","fetchGet","fetchAddTodo","fetchDeleteTodo","fetchUpdateTodo","fetchUpdateCompleted","startFetchMyQuery","errors","data","console","error","TodoList","read","then","res","setState","todos","currentId","last","state","this","updatedTodos","map","removeTodos","filter","newValue","test","text","log","newTodos","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e0cf084.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.task : '');\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            task: input\r\n        });\r\n\r\n        setInput('')\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        setInput(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <form className={\"todo-form\"} onSubmit={handleSubmit}>\r\n\r\n            {props.edit ? (\r\n                    <><input\r\n                        type={\"text\"}\r\n                        placeholder={\"Update your item\"}\r\n                        value={input}\r\n                        name={\"text\"}\r\n                        className={\"todo-input edit\"}\r\n                        onChange={handleChange}\r\n                        ref={inputRef}\r\n                    />\r\n                        <button className={\"todo-button edit\"}>Update</button>\r\n                    </>) :\r\n                <>\r\n                    <input\r\n                        type={\"text\"}\r\n                        placeholder={\"Add new todo\"}\r\n                        value={input}\r\n                        name={\"text\"}\r\n                        className={\"todo-input\"}\r\n                        onChange={handleChange}\r\n                        ref={inputRef}\r\n                    />\r\n                    <button className={\"todo-button\"}>Add todo</button>\r\n                </>\r\n            }\r\n\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm","import React, {useState} from \"react\";\r\nimport TodoForm from \"../todo-form/todo-form.component\";\r\nimport {CgEditFlipH, CgCloseR} from \"react-icons/cg\";\r\n\r\nfunction Todo({todo, completeTodo, removeTodo, updateTodo}) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        task: '',\r\n        completed: false\r\n    });\r\n\r\n    const submitUpdate = (value) => {\r\n        updateTodo(edit.id,value.task)\r\n        setEdit({\r\n            id: null,\r\n            task: '',\r\n            completed: false\r\n        })\r\n    }\r\n\r\n    return (edit.id !== todo.id ? (\r\n                <>\r\n                    <div\r\n                        className={todo.completed ? 'todo-row complete' : 'todo-row'}\r\n                        >\r\n                        <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                            {todo.task}\r\n                        </div>\r\n                        <div className={\"icons\"}>\r\n                            <CgCloseR\r\n                                onClick={() => removeTodo(todo.id, todo.completed)}\r\n                                className='delete-icon'\r\n                            />\r\n                            <CgEditFlipH\r\n                                onClick={() => setEdit({id: todo.id, task: todo.task, completed: todo.completed})}\r\n                                className='edit-icon'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </>)\r\n            : (<><TodoForm edit={edit} onSubmit={submitUpdate}/></>)\r\n    )\r\n}\r\n\r\nexport default Todo;","async function fetchGraphQL(operationsDoc, operationName, variables) {\r\n    const result = await fetch(\r\n        `https://todo-vakor-api.hasura.app/v1/graphql`,\r\n        {\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"x-hasura-admin-secret\": \"WagKYQUh0NIv5z5XXgQ9JNRiu2YZVOr1kpWdCMRvqGYAJc192UxH5rpwXGJAlcMV\"\r\n            },\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                query: operationsDoc,\r\n                variables: variables,\r\n                operationName: operationName\r\n            })\r\n        },\r\n    );\r\n\r\n    return await result.json();\r\n}\r\n\r\nconst operationsDoc = `\r\n  query Get{\r\n    todos {\r\n      id\r\n      task\r\n      completed\r\n    }\r\n  }\r\n  \r\n  mutation RemoveTodo($id: Int!) {\r\n  delete_todos_by_pk(id: $id){\r\n    id\r\n  }  \r\n}\r\n\r\n    mutation UpdateTodo($id: Int!, $task: String!) {\r\n        update_todos_by_pk(pk_columns: {id: $id}, _set: {task:$task}) {\r\n            task\r\n    }\r\n}\r\nmutation AddTodo($todo: todos_insert_input!) {\r\n  insert_todos(objects: [$todo]) {\r\n    affected_rows\r\n  }\r\n}\r\nmutation CompleteTodo($id: Int!, $completed: Boolean!) {\r\n        update_todos_by_pk(pk_columns: {id: $id}, _set: {completed:$completed}) {\r\n            completed\r\n    }\r\n}\r\n`;\r\n\r\nfunction fetchGet(operationName) {\r\n    return fetchGraphQL(\r\n        operationsDoc,\r\n        operationName,\r\n        {}\r\n    );\r\n}\r\n\r\nfunction fetchAddTodo(operationName, props) {\r\n    return fetchGraphQL(\r\n        operationsDoc,\r\n        operationName,\r\n        {\r\n            \"todo\": {\r\n                \"task\": props.task,\r\n                \"completed\": \"false\"\r\n            }\r\n        }\r\n    );\r\n}\r\n\r\nfunction fetchDeleteTodo(operationName, props) {\r\n    return fetchGraphQL(\r\n        operationsDoc,\r\n        operationName,\r\n        {\r\n            \"id\": props,\r\n        }\r\n    );\r\n}\r\n\r\nfunction fetchUpdateTodo(operationName, props) {\r\n    return fetchGraphQL(\r\n        operationsDoc,\r\n        operationName,\r\n        {\r\n            \"id\": props.id,\r\n            \"task\": props.task\r\n        }\r\n    );\r\n}\r\n\r\nfunction fetchUpdateCompleted(operationName, props) {\r\n    return fetchGraphQL(\r\n        operationsDoc,\r\n        operationName,\r\n        {\r\n            \"id\": props.id,\r\n            \"completed\": props.completed\r\n        }\r\n    );\r\n}\r\n\r\nexport const startFetchMyQuery = async (operationName, props) => {\r\n    let errors = [];\r\n    let data = \"\";\r\n    switch (operationName) {\r\n        case \"Get\":\r\n            ({errors, data} = await fetchGet(operationName));\r\n            break;\r\n        case \"AddTodo\":\r\n            ({errors, data} = await fetchAddTodo(operationName, props));\r\n            break;\r\n        case \"CompleteTodo\":\r\n            ({errors, data} = await fetchUpdateCompleted(operationName, props));\r\n            break;\r\n        case \"RemoveTodo\":\r\n            ({errors, data} = await fetchDeleteTodo(operationName, props));\r\n            break;\r\n        case \"UpdateTodo\":\r\n            ({errors, data} = await fetchUpdateTodo(operationName, props));\r\n            break;\r\n    }\r\n\r\n\r\n    if (errors) {\r\n        // handle those errors like a pro\r\n        console.error(errors);\r\n    }\r\n    return data;\r\n    // this.setState({todos: data.todos})\r\n    // do something great with this precious data\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport TodoForm from \"../todo-form/todo-form.component\";\r\nimport Todo from \"../todo/todo.component\";\r\nimport {startFetchMyQuery} from \"../../HasuraAPI/GraphQL\";\r\n\r\nimport {Component} from \"react\";\r\n\r\nclass TodoList extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            todos: [],\r\n            currentId: 0\r\n        };\r\n\r\n        this.read();\r\n    }\r\n\r\n    read = () => {\r\n        startFetchMyQuery(\"Get\", null).then(res => {\r\n            this.setState({todos: res.todos}, ()=>this.setState({currentId: res.todos.last ? res.todos.last.id + 1 : 1}));\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        const todos = this.state.todos;\r\n        const addTodo = (props) => {\r\n            if (!props.task || /^\\s*$/.test(props.text)) {\r\n                return;\r\n            }\r\n\r\n            startFetchMyQuery(\"AddTodo\", props);\r\n            const newTodo = ({\r\n                id: this.state.currentId,\r\n                task: props.task,\r\n                completed: false\r\n            });\r\n            const newTodos = [newTodo, ...todos];\r\n            this.setState({todos: newTodos});\r\n\r\n            this.setState({currentId: this.state.currentId + 1});\r\n        };\r\n\r\n        const completeTodo = (id, completed) => {\r\n            startFetchMyQuery(\"CompleteTodo\", {\"id\": id, \"completed\": !completed});\r\n            const updatedTodos = todos.map(todo => {\r\n                if (todo.id === id) {\r\n                    todo.completed = !todo.completed\r\n                }\r\n                return todo;\r\n            });\r\n            this.setState({todos: updatedTodos});\r\n        };\r\n\r\n        const removeTodo = (id) => {\r\n            startFetchMyQuery(\"RemoveTodo\", id);\r\n            let removeTodos = [...todos].filter(todo => todo.id !== id);\r\n            this.setState({todos: removeTodos});\r\n        };\r\n\r\n        const updateTodo = (id, newValue) => {\r\n            if (!newValue || /^\\s*$/.test(newValue.text)) {\r\n                return;\r\n            }\r\n            console.log(newValue);\r\n            startFetchMyQuery(\"UpdateTodo\", {\r\n                \"id\": id,\r\n                \"task\": newValue\r\n            });\r\n            this.setState({\r\n                todos: todos.map(todo => {\r\n                        if (todo.id === id) {\r\n                            todo.task = newValue;\r\n                        }\r\n                        return todo;\r\n                    }\r\n                )\r\n            });\r\n        };\r\n\r\n        return (\r\n\r\n            <div>\r\n                <h1>What's the plan for Today?</h1>\r\n                <TodoForm onSubmit={addTodo}></TodoForm>\r\n                {todos.map((todo) => (\r\n                    <Todo todo={todo}\r\n                          completeTodo={completeTodo}\r\n                          removeTodo={removeTodo}\r\n                          updateTodo={updateTodo}\r\n                    />\r\n                ))}\r\n                {/*<Todo*/}\r\n\r\n                {/*    todo={todos[0]}*/}\r\n                {/*    completeTodo={completeTodo}*/}\r\n                {/*    removeTodo={removeTodo}*/}\r\n                {/*    updateTodo={updateTodo}*/}\r\n                {/*/>*/}\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default TodoList;","import TodoList from \"./Components/todo-list/todo-list.component\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n      <div className='todo-app'>\r\n        <TodoList />\r\n      </div>\r\n  )\r\n\r\n  ;\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}