{"version":3,"sources":["Components/todo-form/todo-form.component.jsx","Components/todo/todo.component.jsx","HasuraAPI/MutationsGraphQL.js","HasuraAPI/SubscriptionsGraphQL.js","Components/todo-list/todo-list.component.jsx","App.js","index.js"],"names":["TodoForm","props","useState","edit","task","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","value","className","onSubmit","preventDefault","type","placeholder","name","onChange","ref","Todo","todo","completeTodo","removeTodo","updateTodo","id","completed","setEdit","onClick","AddTodo","gql","SubscribeTodo","TodoList","todos","setTodos","useMutation","UpdateTodo","RemoveTodo","addTodo","loading","useSubscription","data","error","useAuth0","CompleteTodo","loginWithRedirect","logout","isAuthenticated","updatedTodos","map","removeTodos","filter","newValue","test","text","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.732f8473.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.task : '');\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            task: input\r\n        });\r\n\r\n        setInput('')\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        setInput(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <form className={\"todo-form\"} onSubmit={handleSubmit}>\r\n\r\n            {props.edit ? (\r\n                    <><input\r\n                        type={\"text\"}\r\n                        placeholder={\"Update your item\"}\r\n                        value={input}\r\n                        name={\"text\"}\r\n                        className={\"todo-input edit\"}\r\n                        onChange={handleChange}\r\n                        ref={inputRef}\r\n                    />\r\n                        <button className={\"todo-button edit\"}>Update</button>\r\n                    </>) :\r\n                <>\r\n                    <input\r\n                        type={\"text\"}\r\n                        placeholder={\"Add new todo\"}\r\n                        value={input}\r\n                        name={\"text\"}\r\n                        className={\"todo-input\"}\r\n                        onChange={handleChange}\r\n                        ref={inputRef}\r\n                    />\r\n                    <button className={\"todo-button\"}>Add todo</button>\r\n                </>\r\n            }\r\n\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm","import React, {useState} from \"react\";\r\nimport TodoForm from \"../todo-form/todo-form.component\";\r\nimport {CgEditFlipH, CgCloseR} from \"react-icons/cg\";\r\n\r\nfunction Todo({todo, completeTodo, removeTodo, updateTodo}) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        task: '',\r\n        completed: false\r\n    });\r\n\r\n    const submitUpdate = (value) => {\r\n        updateTodo(edit.id,value.task)\r\n        setEdit({\r\n            id: null,\r\n            task: '',\r\n            completed: false\r\n        })\r\n    }\r\n\r\n    return (edit.id !== todo.id ? (\r\n                <>\r\n                    <div\r\n                        className={todo.completed ? 'todo-row complete' : 'todo-row'}\r\n                        >\r\n                        <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                            {todo.task}\r\n                        </div>\r\n                        <div className={\"icons\"}>\r\n                            <CgCloseR\r\n                                onClick={() => removeTodo(todo.id, todo.completed)}\r\n                                className='delete-icon'\r\n                            />\r\n                            <CgEditFlipH\r\n                                onClick={() => setEdit({id: todo.id, task: todo.task, completed: todo.completed})}\r\n                                className='edit-icon'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </>)\r\n            : (<><TodoForm edit={edit} onSubmit={submitUpdate}/></>)\r\n    )\r\n}\r\n\r\nexport default Todo;","import {gql} from '@apollo/client';\r\n\r\nexport const UpdateTodo = gql`\r\n    mutation ToggleTodo($id: Int!, $completed: Boolean!) {\r\n        update_todos(where: {id: {_eq: $id}}, _set: {completed: $done}) {\r\n            returning {\r\n                id\r\n                title\r\n                completed\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const AddTodo = gql`\r\n    mutation AddTodo($title: String!) {\r\n        insert_todos(objects: {title: $text}) {\r\n            returning {\r\n                id\r\n                title\r\n                completed\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const RemoveTodo = gql`\r\n    mutation DeleteTodo($id: Int!) {\r\n        delete_todos(where: {id: {_eq: $id}}) {\r\n            returning {\r\n                id\r\n                title\r\n                completed\r\n            }\r\n        }\r\n    }\r\n`;","import { gql } from '@apollo/client';\r\n\r\nexport const SubscribeTodo = gql`\r\n    subscription NewTaskSubscription {\r\n        todos(order_by: {id: asc}) {\r\n            id\r\n            title\r\n            completed\r\n        }\r\n    }\r\n`;","import {React, useState} from \"react\";\r\nimport TodoForm from \"../todo-form/todo-form.component\";\r\nimport Todo from \"../todo/todo.component\";\r\nimport {useMutation, useSubscription} from \"@apollo/client\";\r\nimport {AddTodo, RemoveTodo, UpdateTodo} from \"../../HasuraAPI/MutationsGraphQL\";\r\nimport {SubscribeTodo} from \"../../HasuraAPI/SubscriptionsGraphQL\";\r\nimport {useAuth0} from \"@auth0/auth0-react\";\r\n\r\n\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState([]);\r\n    const [currId, setCurrId] = useState(0);\r\n    const [updateTodo] = useMutation(UpdateTodo);\r\n    const [removeTodo] = useMutation(RemoveTodo);\r\n    const [addTodo, { loading: addTodoLoading }] = useMutation(AddTodo);\r\n    const { data, loading, error } = useSubscription(SubscribeTodo);\r\n    const {\r\n        loginWithRedirect, logout, isAuthenticated, loading: authLoading,\r\n    } = useAuth0();\r\n\r\n    const AddNewTodo = (props) => {\r\n        if (!props.task || /^\\s*$/.test(props.text)) {\r\n            return;\r\n        }\r\n\r\n        const newTodo = ({\r\n            id: currId,\r\n            task: props.task,\r\n            completed: false\r\n        });\r\n\r\n        const newTodos = [newTodo, ...todos];\r\n        setTodos(newTodos);\r\n        setCurrId(currId + 1);\r\n    };\r\n\r\n    const CompleteTodo = (id, completed) => {\r\n        const updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.completed = !todo.completed\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n    const RemoveTodo = (id) => {\r\n        let removeTodos = [...todos].filter(todo => todo.id !== id);\r\n        setTodos(removeTodos);\r\n    };\r\n\r\n    const UpdateTodo = (id, newValue) => {\r\n        if (!newValue || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n        setTodos(\r\n            todos.map(todo => {\r\n                    if (todo.id === id) {\r\n                        todo.task = newValue;\r\n                    }\r\n                    return todo;\r\n                }\r\n            )\r\n        );\r\n    };\r\n    return (\r\n\r\n        <div>\r\n            <h1>What's the plan for Today?</h1>\r\n            <TodoForm onSubmit={addTodo}></TodoForm>\r\n            {todos.map((todo) => (\r\n                <Todo todo={todo}\r\n                      completeTodo={CompleteTodo}\r\n                      removeTodo={RemoveTodo}\r\n                      updateTodo={UpdateTodo}\r\n                />\r\n            ))}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n// read = () => {\r\n//\r\n//     startFetchMyQuery(\"Get\", null).then(res => {\r\n//         this.setState({todos: res.todos}, ()=>this.setState({currentId: res.todos.last ? res.todos.last.id + 1 : 1}));\r\n//     });\r\n//\r\n// }\r\n\r\n\r\nexport default TodoList;","import TodoList from \"./Components/todo-list/todo-list.component\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n      <div className='todo-app'>\r\n        <TodoList />\r\n      </div>\r\n  )\r\n\r\n  ;\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {Auth0Provider} from \"@auth0/auth0-react\";\r\nimport config from './config.json';\r\nimport AppoloWrapper from \"./Components/appolo-wrappers/appolo-wrapper\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      {/*<Auth0Provider*/}\r\n      {/*    domain={config['auth-domain']}*/}\r\n      {/*    clientId={config['auth-clinet-id']}*/}\r\n      {/*    redirectUri={config['auth-redirect-uri']}*/}\r\n      {/*    audience={config['auth-audience']}*/}\r\n      {/*>*/}\r\n      {/*    <AppoloWrapper>*/}\r\n              <App />\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}