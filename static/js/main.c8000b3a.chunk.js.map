{"version":3,"sources":["Components/todo-form/todo-form.component.jsx","Components/todo/todo.component.jsx","HasuraAPI/MutationsGraphQL.js","HasuraAPI/SubscriptionsGraphQL.js","Components/spinner/spinner.component.jsx","Components/todo-list/todo-list.component.jsx","App.js","Components/appolo-wrappers/appolo-wrapper.js","index.js"],"names":["TodoForm","props","useState","edit","task","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","value","className","onSubmit","preventDefault","type","placeholder","name","onChange","ref","Todo","todo","completeTodo","removeTodo","updateTodo","id","completed","setEdit","onClick","CompleteTodoMutation","gql","UpdateTodoMutation","AddTodoMutation","RemoveTodoMutation","SubscribeTodo","Spinner","TodoList","useMutation","addTodo","useSubscription","data","loading","error","useAuth0","loginWithRedirect","logout","isAuthenticated","authLoading","isoffline","setOffline","showOfflineMessage","alert","window","onoffline","ononline","CompleteTodo","variables","RemoveTodo","UpdateTodo","newValue","test","text","title","todos","map","App","ApolloWrapper","children","getAccessTokenSilently","bearerToken","setBearerToken","a","token","console","message","getToken","authLink","setContext","_","headers","Authorization","wsLink","WebSocketLink","uri","process","options","reconnect","connectionParams","client","ApolloClient","link","concat","cache","InMemoryCache","typePolicies","Subscription","fields","merge","ApolloProvider","ReactDOM","render","domain","clientId","redirectUri","audience","document","getElementById"],"mappings":"gMA0DeA,MAxDf,SAAkBC,GAAQ,IAAD,EACKC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,KAAO,IAD7C,mBACdC,EADc,KACPC,EADO,KAGfC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAUMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOC,QAGtB,OACI,sBAAMC,UAAW,YAAaC,SAfb,SAAAJ,GACjBA,EAAEK,iBAEFjB,EAAMgB,SAAS,CACXb,KAAMC,IAGVC,EAAS,KAQT,SACKL,EAAME,KACH,qCACI,uBACIgB,KAAM,OACNC,YAAa,mBACbL,MAAOV,EACPgB,KAAM,OACNL,UAAW,kBACXM,SAAUV,EACVW,IAAKhB,IAET,wBAAQS,UAAW,mBAAnB,uBAGJ,qCACI,uBACIG,KAAM,OACNC,YAAa,eACbL,MAAOV,EACPgB,KAAM,OACNL,UAAW,aACXM,SAAUV,EACVW,IAAKhB,IAET,wBAAQS,UAAW,cAAnB,4B,QCALQ,I,UAAAA,EA/Cf,YAA+D,IAA/CC,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAAc,EAClC1B,mBAAS,CAC7B2B,GAAI,KACJzB,KAAM,GACN0B,WAAW,IAJ2C,mBACnD3B,EADmD,KAC7C4B,EAD6C,KAgB1D,OAAO5B,EAAK0B,KAAOJ,EAAKI,GACpB,mCACI,sBAAKb,UAAWS,EAAKK,UAAY,oBAAsB,WAAvD,UACI,qBAAmBE,QAAS,kBAAMN,EAAaD,EAAKI,KAApD,SACKJ,EAAKrB,MADAqB,EAAKI,IAGf,sBAAKb,UAAW,QAAhB,UACI,cAAC,IAAD,CACIgB,QAAS,kBAAML,EAAWF,EAAKI,GAAIJ,EAAKK,YACxCd,UAAU,gBAEd,cAAC,IAAD,CACIgB,QAAS,kBACLD,EAAQ,CACJF,GAAIJ,EAAKI,GACTzB,KAAMqB,EAAKrB,KACX0B,UAAWL,EAAKK,aAGxBd,UAAU,sBAM1B,mCACI,cAAC,EAAD,CAAUb,KAAMA,EAAMc,SAnCT,SAAAF,GACjBa,EAAWzB,EAAK0B,GAAId,EAAMX,MAC1B2B,EAAQ,CACJF,GAAI,KACJzB,KAAM,GACN0B,WAAW,U,iCCdVG,EAAuBC,YAAH,oVAepBC,EAAqBD,YAAH,mSAYlBE,EAAkBF,YAAH,yPAYfG,EAAqBH,YAAH,uPCvClBI,EAAgBJ,YAAH,wL,MCoBXK,MAnBf,WACI,OACI,sBAAKvB,UAAW,cAAhB,UACI,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,4BCoIGwB,MAvIf,WAAqB,IAAD,EACKC,YAAYN,GAA1BP,EADS,sBAEKa,YAAYJ,GAA1BV,EAFS,sBAGOc,YAAYR,GAA5BP,EAHS,sBAIEe,YAAYL,GAAvBM,EAJS,sBAKiBC,YAAgBL,GAAzCM,EALQ,EAKRA,KAAMC,EALE,EAKFA,QAASC,EALP,EAKOA,MALP,EAWZC,cAJAC,EAPY,EAOZA,kBACAC,EARY,EAQZA,OACAC,EATY,EASZA,gBACSC,EAVG,EAUZN,QAVY,EAegB3C,oBAAS,GAfzB,mBAeTkD,EAfS,KAeEC,EAfF,KAiBhB,SAASC,IACLC,MAJA,0DAOJC,OAAOC,UAAY,WACfJ,GAAW,IAGfG,OAAOE,SAAW,WACdL,GAAW,IAGf,IAgBMM,EAAe,SAAC9B,EAAIC,GAClBsB,EACAE,IAQJ5B,EAAa,CAAEkC,UALG,CACd/B,GAAIA,EACJC,WAAYA,MAMd+B,EAAa,SAAAhC,GACXuB,EACAE,IAOJ3B,EAAW,CAAEiC,UAJK,CACd/B,GAAIA,MAMNiC,EAAa,SAACjC,EAAIkC,GACfA,IAAY,QAAQC,KAAKD,EAASE,QAGnCb,EACAE,IAOJ1B,EAAW,CAAEgC,UAJK,CACd/B,GAAIA,EACJqC,MAAOH,OAKf,OAAIlB,GAAWM,EAEP,gCACI,+CACA,cAAC,EAAD,OAKPD,EAaDJ,EACO,sCAIP,gCACI,4DACA,cAAC,EAAD,CAAU7B,SArFC,SAAAhB,GACf,GAAKA,EAAMG,OAAQ,QAAQ4D,KAAK/D,EAAMgE,MAItC,GAAIb,EACAE,QADJ,CAIA,IAAMM,EAAY,CACdM,MAAOjE,EAAMG,MAGjBsC,EAAQ,CAAEkB,kBAyELhB,EAAKuB,MAAMC,KAAI,SAAA3C,GAAI,OAChB,cAAC,EAAD,CAEIA,KAAM,CACFI,GAAIJ,EAAKI,GACTzB,KAAMqB,EAAKyC,MACXpC,UAAWL,EAAKK,WAEpBJ,aAAciC,EACdhC,WAAYkC,EACZjC,WAAYkC,GARPrC,EAAKI,OAWlB,wBAAQG,QAAS,kBAAMiB,KAAUjC,UAAW,cAA5C,wBAhCA,gCACI,yDACA,wBACIgB,QAAS,kBAAMgB,KACfhC,UAAW,cAFf,wB,MCpGDqD,MARf,WACI,OACI,qBAAKrD,UAAU,WAAf,SACI,cAAC,EAAD,O,mFC+DGsD,MA3Df,YAAsC,IAAbC,EAAY,EAAZA,SAAY,EACmBxB,cAA5CG,EADyB,EACzBA,gBAAiBsB,EADQ,EACRA,uBADQ,EAEKtE,qBAFL,mBAE1BuE,EAF0B,KAEbC,EAFa,KAIjCjE,qBAAU,YACQ,uCAAG,4BAAAkE,EAAA,mEAEKzB,EAFL,gCAGGsB,IAHH,8CAIH,GAJG,OAEHI,EAFG,KAKTF,EAAeE,GALN,kDAOTC,QAAQ/B,MAAM,KAAEgC,SAPP,0DAAH,qDAUdC,KACD,CAAC7B,EAAiBsB,IAErB,IAAMQ,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC9B,OAAKV,EAEE,CACHU,QAAQ,2BACDA,GADA,IAEHC,cAAc,UAAD,OAAYX,MALR,CAAEU,cAUzBE,EAAS,IAAIC,IAAc,CAC7BC,IAAKC,+CACLC,QAAS,CACLC,WAAW,EACXC,iBAAkB,iBAAO,CACrBR,QAAS,CACLC,cAAc,UAAD,OAAYX,SAMnCmB,EAAS,IAAIC,IAAa,CAC5BC,KAAMC,YAAOf,EAAUK,GACvBW,MAAO,IAAIC,IAAc,CACrBC,aAAc,CACVC,aAAc,CACVC,OAAQ,CACJjC,MAAO,CACHkC,OAAO,UAQ/B,OAAO,cAACC,EAAA,EAAD,CAAgBV,OAAQA,EAAxB,SAAiCrB,KC7D5CgC,IAASC,OACL,cAAC,IAAD,CACIC,OAAQjB,4BACRkB,SAAUlB,mCACVmB,YAAanB,oCACboB,SAAUpB,4CAJd,SAKI,cAAC,EAAD,UACI,cAAC,EAAD,QAGRqB,SAASC,eAAe,W","file":"static/js/main.c8000b3a.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nfunction TodoForm(props) {\n    const [input, setInput] = useState(props.edit ? props.edit.task : '');\n\n    const inputRef = useRef(null);\n\n    useEffect(() => {\n        inputRef.current.focus();\n    });\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        props.onSubmit({\n            task: input,\n        });\n\n        setInput('');\n    };\n\n    const handleChange = e => {\n        setInput(e.target.value);\n    };\n\n    return (\n        <form className={'todo-form'} onSubmit={handleSubmit}>\n            {props.edit ? (\n                <>\n                    <input\n                        type={'text'}\n                        placeholder={'Update your item'}\n                        value={input}\n                        name={'text'}\n                        className={'todo-input edit'}\n                        onChange={handleChange}\n                        ref={inputRef}\n                    />\n                    <button className={'todo-button edit'}>Update</button>\n                </>\n            ) : (\n                <>\n                    <input\n                        type={'text'}\n                        placeholder={'Add new todo'}\n                        value={input}\n                        name={'text'}\n                        className={'todo-input'}\n                        onChange={handleChange}\n                        ref={inputRef}\n                    />\n                    <button className={'todo-button'}>Add todo</button>\n                </>\n            )}\n        </form>\n    );\n}\n\nexport default TodoForm;\n","import React, { useState } from 'react';\nimport TodoForm from '../todo-form/todo-form.component';\nimport { CgEditFlipH, CgCloseR } from 'react-icons/cg';\n\nfunction Todo({ todo, completeTodo, removeTodo, updateTodo }) {\n    const [edit, setEdit] = useState({\n        id: null,\n        task: '',\n        completed: false,\n    });\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value.task);\n        setEdit({\n            id: null,\n            task: '',\n            completed: false,\n        });\n    };\n\n    return edit.id !== todo.id ? (\n        <>\n            <div className={todo.completed ? 'todo-row complete' : 'todo-row'}>\n                <div key={todo.id} onClick={() => completeTodo(todo.id)}>\n                    {todo.task}\n                </div>\n                <div className={'icons'}>\n                    <CgCloseR\n                        onClick={() => removeTodo(todo.id, todo.completed)}\n                        className=\"delete-icon\"\n                    />\n                    <CgEditFlipH\n                        onClick={() =>\n                            setEdit({\n                                id: todo.id,\n                                task: todo.task,\n                                completed: todo.completed,\n                            })\n                        }\n                        className=\"edit-icon\"\n                    />\n                </div>\n            </div>\n        </>\n    ) : (\n        <>\n            <TodoForm edit={edit} onSubmit={submitUpdate} />\n        </>\n    );\n}\n\nexport default Todo;\n","import { gql } from '@apollo/client';\n\nexport const CompleteTodoMutation = gql`\n    mutation CompleteTodo($id: Int!, $completed: Boolean!) {\n        update_todos(\n            where: { id: { _eq: $id } }\n            _set: { completed: $completed }\n        ) {\n            returning {\n                id\n                title\n                completed\n            }\n        }\n    }\n`;\n\nexport const UpdateTodoMutation = gql`\n    mutation CompleteTodo($id: Int!, $title: String!) {\n        update_todos(where: { id: { _eq: $id } }, _set: { title: $title }) {\n            returning {\n                id\n                title\n                completed\n            }\n        }\n    }\n`;\n\nexport const AddTodoMutation = gql`\n    mutation AddTodo($title: String!) {\n        insert_todos(objects: { title: $title }) {\n            returning {\n                id\n                title\n                completed\n            }\n        }\n    }\n`;\n\nexport const RemoveTodoMutation = gql`\n    mutation RemoveTodo($id: Int!) {\n        delete_todos(where: { id: { _eq: $id } }) {\n            returning {\n                id\n                title\n                completed\n            }\n        }\n    }\n`;\n","import { gql } from '@apollo/client';\n\nexport const SubscribeTodo = gql`\n    subscription NewTaskSubscription {\n        todos(order_by: { id: asc }) {\n            id\n            title\n            completed\n        }\n    }\n`;\n","import React from 'react';\nimport './spinnet.styles.css';\n\nfunction Spinner() {\n    return (\n        <div className={'lds-default'}>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n    );\n}\n\nexport default Spinner;\n","import React, { useState } from 'react';\nimport TodoForm from '../todo-form/todo-form.component';\nimport Todo from '../todo/todo.component';\nimport { useMutation, useSubscription } from '@apollo/client';\nimport {\n    AddTodoMutation,\n    RemoveTodoMutation,\n    UpdateTodoMutation,\n    CompleteTodoMutation,\n} from '../../HasuraAPI/MutationsGraphQL';\nimport { SubscribeTodo } from '../../HasuraAPI/SubscriptionsGraphQL';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport Spinner from '../spinner/spinner.component';\n\nfunction TodoList() {\n    const [updateTodo] = useMutation(UpdateTodoMutation);\n    const [removeTodo] = useMutation(RemoveTodoMutation);\n    const [completeTodo] = useMutation(CompleteTodoMutation);\n    const [addTodo] = useMutation(AddTodoMutation);\n    const { data, loading, error } = useSubscription(SubscribeTodo);\n    const {\n        loginWithRedirect,\n        logout,\n        isAuthenticated,\n        loading: authLoading,\n    } = useAuth0();\n\n    const offlineMessage =\n        'You are currently offline, all functions are disabled!';\n    const [isoffline, setOffline] = useState(false);\n\n    function showOfflineMessage() {\n        alert(offlineMessage);\n    }\n\n    window.onoffline = () => {\n        setOffline(true);\n    };\n\n    window.ononline = () => {\n        setOffline(false);\n    };\n\n    const AddNewTodo = props => {\n        if (!props.task || /^\\s*$/.test(props.text)) {\n            return;\n        }\n\n        if (isoffline) {\n            showOfflineMessage();\n            return;\n        }\n        const variables = {\n            title: props.task,\n        };\n\n        addTodo({ variables });\n    };\n\n    const CompleteTodo = (id, completed) => {\n        if (isoffline) {\n            showOfflineMessage();\n            return;\n        }\n        const variables = {\n            id: id,\n            completed: !completed,\n        };\n\n        completeTodo({ variables });\n    };\n\n    const RemoveTodo = id => {\n        if (isoffline) {\n            showOfflineMessage();\n            return;\n        }\n        const variables = {\n            id: id,\n        };\n\n        removeTodo({ variables });\n    };\n\n    const UpdateTodo = (id, newValue) => {\n        if (!newValue || /^\\s*$/.test(newValue.text)) {\n            return;\n        }\n        if (isoffline) {\n            showOfflineMessage();\n            return;\n        }\n        const variables = {\n            id: id,\n            title: newValue,\n        };\n        updateTodo({ variables });\n    };\n\n    if (loading || authLoading) {\n        return (\n            <div>\n                <h1>Wait a second</h1>\n                <Spinner />\n            </div>\n        );\n    }\n\n    if (!isAuthenticated) {\n        return (\n            <div>\n                <h1>Please log in to start:</h1>\n                <button\n                    onClick={() => loginWithRedirect()}\n                    className={'auth-button'}>\n                    Log In\n                </button>\n            </div>\n        );\n    }\n\n    if (error) {\n        return <p>Error</p>;\n    }\n\n    return (\n        <div>\n            <h1>What&apos;s the plan for Today?</h1>\n            <TodoForm onSubmit={AddNewTodo} />\n            {data.todos.map(todo => (\n                <Todo\n                    key={todo.id}\n                    todo={{\n                        id: todo.id,\n                        task: todo.title,\n                        completed: todo.completed,\n                    }}\n                    completeTodo={CompleteTodo}\n                    removeTodo={RemoveTodo}\n                    updateTodo={UpdateTodo}\n                />\n            ))}\n            <button onClick={() => logout()} className={'auth-button'}>\n                Log out\n            </button>\n        </div>\n    );\n}\n\nexport default TodoList;\n","import TodoList from './Components/todo-list/todo-list.component';\nimport './App.css';\nimport React from 'react';\n\nfunction App() {\n    return (\n        <div className=\"todo-app\">\n            <TodoList />\n        </div>\n    );\n}\n\nexport default App;\n","import React, { useState, useEffect } from 'react';\nimport {\n    ApolloProvider,\n    concat,\n    ApolloClient,\n    InMemoryCache,\n} from '@apollo/client';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { setContext } from '@apollo/link-context';\nimport { WebSocketLink } from '@apollo/client/link/ws';\n\nfunction ApolloWrapper({ children }) {\n    const { isAuthenticated, getAccessTokenSilently } = useAuth0();\n    const [bearerToken, setBearerToken] = useState();\n\n    useEffect(() => {\n        const getToken = async () => {\n            try {\n                const token = isAuthenticated\n                    ? await getAccessTokenSilently()\n                    : '';\n                setBearerToken(token);\n            } catch (e) {\n                console.error(e.message);\n            }\n        };\n        getToken();\n    }, [isAuthenticated, getAccessTokenSilently]);\n\n    const authLink = setContext((_, { headers }) => {\n        if (!bearerToken) return { headers };\n\n        return {\n            headers: {\n                ...headers,\n                Authorization: `Bearer ${bearerToken}`,\n            },\n        };\n    });\n\n    const wsLink = new WebSocketLink({\n        uri: process.env.REACT_APP_HASURA_URI,\n        options: {\n            reconnect: true,\n            connectionParams: () => ({\n                headers: {\n                    Authorization: `Bearer ${bearerToken}`,\n                },\n            }),\n        },\n    });\n\n    const client = new ApolloClient({\n        link: concat(authLink, wsLink),\n        cache: new InMemoryCache({\n            typePolicies: {\n                Subscription: {\n                    fields: {\n                        todos: {\n                            merge: false,\n                        },\n                    },\n                },\n            },\n        }),\n    });\n\n    return <ApolloProvider client={client}>{children}</ApolloProvider>;\n}\n\nexport default ApolloWrapper;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Auth0Provider } from '@auth0/auth0-react';\nimport App from './App';\nimport ApolloWrapper from './Components/appolo-wrappers/appolo-wrapper';\n\nReactDOM.render(\n    <Auth0Provider\n        domain={process.env.REACT_APP_AUTH_DOMAIN}\n        clientId={process.env.REACT_APP_AUTH_CLIENT_ID}\n        redirectUri={process.env.REACT_APP_AUTH_REDIRECT_URI}\n        audience={process.env.REACT_APP_AUTH_AUDIENCE}>\n        <ApolloWrapper>\n            <App />\n        </ApolloWrapper>\n    </Auth0Provider>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}