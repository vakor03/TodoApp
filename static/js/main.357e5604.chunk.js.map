{"version":3,"sources":["Components/todo-form/todo-form.component.jsx","Components/todo/todo.component.jsx","HasuraAPI/MutationsGraphQL.js","HasuraAPI/SubscriptionsGraphQL.js","Components/spinner/spinner.component.jsx","Components/todo-list/todo-list.component.jsx","App.js","Components/appolo-wrappers/appolo-wrapper.js","index.js"],"names":["TodoForm","props","useState","edit","task","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","value","className","onSubmit","preventDefault","type","placeholder","name","onChange","ref","Todo","todo","completeTodo","removeTodo","updateTodo","id","completed","setEdit","onClick","CompleteTodoMutation","gql","UpdateTodoMutation","AddTodoMutation","RemoveTodoMutation","SubscribeTodo","Spinner","TodoList","useMutation","addTodo","loading","useSubscription","data","error","useAuth0","loginWithRedirect","logout","isAuthenticated","authLoading","CompleteTodo","variables","RemoveTodo","UpdateTodo","newValue","test","text","title","todos","map","App","ApolloWrapper","children","getAccessTokenSilently","bearerToken","setBearerToken","a","token","getToken","authLink","setContext","_","headers","Authorization","wsLink","WebSocketLink","uri","config","options","reconnect","connectionParams","client","ApolloClient","link","concat","cache","InMemoryCache","typePolicies","Subscription","fields","merge","ApolloProvider","ReactDOM","render","domain","clientId","redirectUri","audience","document","getElementById"],"mappings":"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","file":"static/js/main.357e5604.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.task : '');\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            task: input\r\n        });\r\n\r\n        setInput('')\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        setInput(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <form className={\"todo-form\"} onSubmit={handleSubmit}>\r\n\r\n            {props.edit ? (\r\n                    <><input\r\n                        type={\"text\"}\r\n                        placeholder={\"Update your item\"}\r\n                        value={input}\r\n                        name={\"text\"}\r\n                        className={\"todo-input edit\"}\r\n                        onChange={handleChange}\r\n                        ref={inputRef}\r\n                    />\r\n                        <button className={\"todo-button edit\"}>Update</button>\r\n                    </>) :\r\n                <>\r\n                    <input\r\n                        type={\"text\"}\r\n                        placeholder={\"Add new todo\"}\r\n                        value={input}\r\n                        name={\"text\"}\r\n                        className={\"todo-input\"}\r\n                        onChange={handleChange}\r\n                        ref={inputRef}\r\n                    />\r\n                    <button className={\"todo-button\"}>Add todo</button>\r\n                </>\r\n            }\r\n\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm","import React, {useState} from \"react\";\r\nimport TodoForm from \"../todo-form/todo-form.component\";\r\nimport {CgEditFlipH, CgCloseR} from \"react-icons/cg\";\r\n\r\nfunction Todo({todo, completeTodo, removeTodo, updateTodo}) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        task: '',\r\n        completed: false\r\n    });\r\n\r\n    const submitUpdate = (value) => {\r\n        updateTodo(edit.id,value.task)\r\n        setEdit({\r\n            id: null,\r\n            task: '',\r\n            completed: false\r\n        })\r\n    }\r\n\r\n    return (edit.id !== todo.id ? (\r\n                <>\r\n                    <div\r\n                        className={todo.completed ? 'todo-row complete' : 'todo-row'}\r\n                        >\r\n                        <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                            {todo.task}\r\n                        </div>\r\n                        <div className={\"icons\"}>\r\n                            <CgCloseR\r\n                                onClick={() => removeTodo(todo.id, todo.completed)}\r\n                                className='delete-icon'\r\n                            />\r\n                            <CgEditFlipH\r\n                                onClick={() => setEdit({id: todo.id, task: todo.task, completed: todo.completed})}\r\n                                className='edit-icon'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </>)\r\n            : (<><TodoForm edit={edit} onSubmit={submitUpdate}/></>)\r\n    )\r\n}\r\n\r\nexport default Todo;","import {gql} from '@apollo/client';\r\n\r\nexport const CompleteTodoMutation = gql`\r\n    mutation CompleteTodo($id: Int!, $completed: Boolean!) {\r\n        update_todos(where: {id: {_eq: $id}}, _set: {completed: $completed}) {\r\n            returning {\r\n                id\r\n                title\r\n                completed\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UpdateTodoMutation = gql`\r\n    mutation CompleteTodo($id: Int!, $title: String!) {\r\n        update_todos(where: {id: {_eq: $id}}, _set: {title: $title}) {\r\n            returning {\r\n                id\r\n                title\r\n                completed\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const AddTodoMutation = gql`\r\n    mutation AddTodo($title: String!) {\r\n        insert_todos(objects: {title: $title}) {\r\n            returning {\r\n                id\r\n                title\r\n                completed\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const RemoveTodoMutation = gql`\r\n    mutation RemoveTodo($id: Int!) {\r\n        delete_todos(where: {id: {_eq: $id}}) {\r\n            returning {\r\n                id\r\n                title\r\n                completed\r\n            }\r\n        }\r\n    }\r\n`;","import { gql } from '@apollo/client';\r\n\r\nexport const SubscribeTodo = gql`\r\n    subscription NewTaskSubscription {\r\n        todos(order_by: {id: asc}) {\r\n            id\r\n            title\r\n            completed\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport './spinnet.styles.css';\r\n\r\nfunction Spinner() {\r\n    return (\r\n        <div className={'lds-default'}>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Spinner;\r\n","import {React} from \"react\";\r\nimport TodoForm from \"../todo-form/todo-form.component\";\r\nimport Todo from \"../todo/todo.component\";\r\nimport {useMutation, useSubscription} from \"@apollo/client\";\r\nimport {\r\n    AddTodoMutation, RemoveTodoMutation, UpdateTodoMutation, CompleteTodoMutation\r\n} from \"../../HasuraAPI/MutationsGraphQL\";\r\nimport {SubscribeTodo} from \"../../HasuraAPI/SubscriptionsGraphQL\";\r\nimport {useAuth0} from \"@auth0/auth0-react\";\r\nimport Spinner from \"../spinner/spinner.component\";\r\n\r\n\r\nfunction TodoList() {\r\n    const [updateTodo] = useMutation(UpdateTodoMutation);\r\n    const [removeTodo] = useMutation(RemoveTodoMutation);\r\n    const [completeTodo] = useMutation(CompleteTodoMutation);\r\n    const [addTodo, {loading: addTodoLoading}] = useMutation(AddTodoMutation);\r\n    const {data, loading, error} = useSubscription(SubscribeTodo);\r\n    const {\r\n        loginWithRedirect, logout, isAuthenticated, loading: authLoading,\r\n    } = useAuth0();\r\n\r\n    const AddNewTodo = (props) => {\r\n        if (!props.task || /^\\s*$/.test(props.text)) {\r\n            return;\r\n        }\r\n\r\n        const variables = ({\r\n            title: props.task,\r\n        });\r\n\r\n        addTodo({variables});\r\n    };\r\n\r\n    const CompleteTodo = (id, completed) => {\r\n        const variables = ({\r\n            id: id, completed: !completed,\r\n        });\r\n\r\n        completeTodo({variables});\r\n    };\r\n\r\n    const RemoveTodo = (id) => {\r\n        const variables = ({\r\n            id: id,\r\n        });\r\n\r\n        removeTodo({variables});\r\n    };\r\n\r\n    const UpdateTodo = (id, newValue) => {\r\n        if (!newValue || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n\r\n        const variables = ({\r\n            id: id, title: newValue,\r\n        });\r\n        updateTodo({variables});\r\n    };\r\n\r\n    if (loading || authLoading) {\r\n        return (<div>\r\n            <h1>Wait a second</h1>\r\n            <Spinner/>\r\n        </div>);\r\n    }\r\n\r\n    if (!isAuthenticated) {\r\n        return (<div>\r\n            <h1>Please log in to start:</h1>\r\n            <button onClick={() => loginWithRedirect()} className={\"auth-button\"}>Log In</button>\r\n        </div>);\r\n    }\r\n\r\n    if (error) {\r\n        return <p>Error</p>;\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <h1>What's the plan for Today?</h1>\r\n            <TodoForm onSubmit={AddNewTodo}/>\r\n            {data.todos.map((todo) => (<Todo todo={{\r\n                    id: todo.id, task: todo.title, completed: todo.completed,\r\n                }}\r\n                                             completeTodo={CompleteTodo}\r\n                                             removeTodo={RemoveTodo}\r\n                                             updateTodo={UpdateTodo}\r\n                />))}\r\n            <button onClick={() => logout()} className={\"auth-button\"}>Log out</button>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default TodoList;","import TodoList from \"./Components/todo-list/todo-list.component\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n      <div className='todo-app'>\r\n        <TodoList />\r\n      </div>\r\n  )\r\n\r\n  ;\r\n}\r\n\r\nexport default App;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n    ApolloProvider, concat, ApolloClient, InMemoryCache,\r\n} from '@apollo/client';\r\nimport { useAuth0 } from '@auth0/auth0-react';\r\nimport { setContext } from '@apollo/link-context';\r\nimport { WebSocketLink } from '@apollo/client/link/ws';\r\nimport config from '../../config.json';\r\n\r\nfunction ApolloWrapper({ children }) {\r\n    const { isAuthenticated, getAccessTokenSilently } = useAuth0();\r\n    const [bearerToken, setBearerToken] = useState();\r\n\r\n    useEffect(() => {\r\n        const getToken = async () => {\r\n            const token = isAuthenticated ? await getAccessTokenSilently() : '';\r\n            setBearerToken(token);\r\n        };\r\n        getToken();\r\n    }, [isAuthenticated, getAccessTokenSilently]);\r\n\r\n    const authLink = setContext((_, { headers }) => {\r\n        if (!bearerToken) return { headers };\r\n\r\n        return {\r\n            headers: {\r\n                ...headers,\r\n                Authorization: `Bearer ${bearerToken}`,\r\n            },\r\n        };\r\n    });\r\n\r\n\r\n    const wsLink = new WebSocketLink({\r\n        uri: config['hasura-uri'],\r\n        options: {\r\n            reconnect: true,\r\n            connectionParams: () => ({\r\n                headers: {\r\n                    Authorization: `Bearer ${bearerToken}`,\r\n                },\r\n            }),\r\n        },\r\n    });\r\n\r\n    const client = new ApolloClient({\r\n        link: concat(authLink, wsLink),\r\n        cache: new InMemoryCache({\r\n            typePolicies: {\r\n                Subscription: {\r\n                    fields: {\r\n                        todos: {\r\n                            merge: false,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        }),\r\n    });\r\n\r\n    return <ApolloProvider client={client}>{children}</ApolloProvider>;\r\n}\r\n\r\nexport default ApolloWrapper;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Auth0Provider } from '@auth0/auth0-react';\r\nimport App from './App';\r\nimport ApolloWrapper from './Components/appolo-wrappers/appolo-wrapper';\r\nimport config from './config.json';\r\n\r\nReactDOM.render(\r\n    <Auth0Provider\r\n        domain={config['auth-domain']}\r\n        clientId={config['auth-client-id']}\r\n        redirectUri={'https://vakor03.github.io/TodoApp'}\r\n        audience={config['auth-audience']}\r\n    >\r\n        <ApolloWrapper>\r\n            <App />\r\n        </ApolloWrapper>\r\n    </Auth0Provider>,\r\n    document.getElementById('root'),\r\n);"],"sourceRoot":""}